 <div className="boxes flex xsm:flex-col md:flex-row  w-full md:gap-10">
          <div className="box-1">
            {cartItems &&
            Object.keys(cartItems).some(
              (id) => Object.keys(cartItems[id]).length > 0
            ) ? (
              <div className="flex flex-col md:gap-3 xsm:gap-6">
                <h2 className="text-[18px] font-sb">Shopping Cart items</h2>
                {Datas.map((data) => {
                  const item = cartItems[data.id];
                  const sizes = Object.keys(item);
                  return sizes.map((size, index) => (
                    <div
                      className="flex flex-col items-start relative md:w-[600px] py-8"
                      style={{
                        boxShadow: "0px 2px 4px rgba(0, 0, 0, 0.1)",
                        borderRadius: "8px", // Optional: Add border radius for rounded corners
                      }}
                      key={`${data.id}_${index}`}
                    >
                      <div className="flex items-center gap-3">
                        <img
                          src={data.image}
                          className="md:w-[90px] lg:w-[110px] h-fit xsm:w-[50px] sm:w-[60px] rounded-lg object-cover"
                          alt=""
                        />
                        <div className="flex flex-col gap-[5px]">
                          <Link className="flex flex-col gap-[3px]"
                            to={`/product/${data.id}`}
                            key={`${data.id}_${index}`}
                          >
                            <h2 className="Type font-sb lg:text-[16px] md:text-[16px] xsm:text-[16px]">{data.Category_Type} </h2>
                           
                            <h3
                              style={{ ":hover": { color: "red" } }}
                              className="lg:text-[14px] md:text-[14px] xsm:text-[12px]"
                            >
                              {data.title}
                            </h3>
                          </Link>
                          <img src={Cancel}
                            className="md:w-4 xsm:w-5 h-auto absolute top-[10px] right-4"
                             onClick={() => handleRemove(data.id,size)}
                            ></img>
                          <div className="flex flex-col gap-[3px]">
                            <div className="flex items-center gap-10">
                            <h2 className="font-sb lg:text-[18px] md:text-[18px] xsm:text-[16px]">Rs {data.new_price}</h2>
                          <h3 className="lg:text-[18px] md:text-[18px] xsm:text-[16px]">Size: <span className="font-b lg:text-[18px] md:text-[18px] xsm:text-[16px] border-size">{size}</span></h3> {/* Render the selected size */}
                            </div>
                          
                          <div className="flex items-center gap-6 absolute bottom-6">
                            <img
                              src={Minus}
                              className="md:w-5 h-fit xsm:w-5 "
                              onClick={() => handleDecrement(data.id, size)}
                            ></img>
                            <h3 className="lg:text-[18px] md:text-[18px] xsm:text-[16px]">{item[size]}</h3>
                            <img
                              src={Add}
                              className="md:w-5 h-fit xsm:w-5 "
                              onClick={() => handleIncrement(data.id, size)}
                            ></img> 
                            </div>
                            <p className="absolute right-6 bottom-1 lg:text-[24px] md:text-[20px] xsm:text-[18px]">
                            <span className="font-sb">
                              Rs {data.new_price * item[size]}
                            </span>
                          </p>
                          </div>
                        </div>
          
                      </div>
                    </div>
                  ));
                })}
              </div>
            ) : (
              <div className="flex items-center py-36">
                <h1 className="text-center">The Shopping Cart is empty</h1>
              </div>
            )}
          </div>
          {/* Only render the order details if there are items in the cart */}
          {cartItems &&
            Object.keys(cartItems).some(
              (id) => Object.keys(cartItems[id]).length > 0
            ) && <div className="flex flex-col gap-1 md:mt-0 xsm:mt-12 items-center">
                  <div className="flex gap-4">
                    <div className="flex flex-col gap-2">
                    <h3 >Order Value</h3>
                    <h3>Delivery Charge</h3>
                    <h3 className="font-sb">Total</h3>
                    </div>
                    <div className="flex flex-col gap-2">
                      <h3>: Rs{" "}{calculateTotalOrderValue()}</h3>
                      <h3>: Rs{" "}{calculateDeliveryCharge()}</h3>
                      <h3 className="font-b">: Rs{" "}{calculateTotalOrderValue() + calculateDeliveryCharge()} </h3>
                  </div>
                  </div>
                  <div className="btn-product-black xsm:mt-5">
                    <button className=""> Proceed To checkout</button>
                  </div>
              </div>}
        </div>